openapi: 3.0.3
info:
  title: School Management System API
  description: API for managing users, documents, and tasks in a school management system
  version: 1.0.0
  contact:
    name: API Support
    email: support@schoolmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server

paths:
  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate a user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      description: Logout the current user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      description: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user by ID
      description: Update a specific user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user by ID
      description: Delete a specific user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents:
    get:
      summary: Get documents
      description: Retrieve documents with optional search, filter, and pagination
      tags:
        - Documents
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A list of documents with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsResponse'
    post:
      summary: Create a new document
      description: Create a new document
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '201':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid document data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/{id}:
    get:
      summary: Get document by ID
      description: Retrieve a specific document by ID
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update document by ID
      description: Update a specific document by ID
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid document data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete document by ID
      description: Delete a specific document by ID
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document deleted successfully
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks:
    get:
      summary: Get tasks
      description: Retrieve tasks with optional search and filter
      tags:
        - Tasks
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: priority
          in: query
          schema:
            type: string
        - name: assignee
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      description: Create a new task
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid task data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{id}:
    get:
      summary: Get task by ID
      description: Retrieve a specific task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update task by ID
      description: Update a specific task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid task data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete task by ID
      description: Delete a specific task by ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subtasks:
    get:
      summary: Get all subtasks
      description: Retrieve a list of all subtasks
      tags:
        - Subtasks
      responses:
        '200':
          description: A list of subtasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subtask'

  /subtasks/{id}:
    get:
      summary: Get subtask by ID
      description: Retrieve a specific subtask by ID
      tags:
        - Subtasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subtask found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtask'
        '404':
          description: Subtask not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update subtask by ID
      description: Update a specific subtask by ID
      tags:
        - Subtasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subtask'
      responses:
        '200':
          description: Subtask updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subtask'
        '400':
          description: Invalid subtask data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Subtask not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete subtask by ID
      description: Delete a specific subtask by ID
      tags:
        - Subtasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Subtask deleted successfully
        '404':
          description: Subtask not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dashboard/stats:
    get:
      summary: Get dashboard statistics
      description: Retrieve dashboard statistics
      tags:
        - Dashboard
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Smith"
        email:
          type: string
          format: email
          example: "john.smith@school.edu"
        role:
          type: string
          enum: [student, teacher, admin]
          example: "teacher"
        department:
          type: string
          example: "Mathematics"
        grade:
          type: string
          example: "10"
        phone:
          type: string
          example: "+1-555-0101"
        dateJoined:
          type: string
          format: date
          example: "2023-08-15"
        status:
          type: string
          enum: [active, inactive]
          example: "active"
        avatar:
          type: string
          example: "/images/avatars/avatar-1.jpg"
      required:
        - firstName
        - lastName
        - email
        - role
        - phone
        - dateJoined
        - status

    Document:
      type: object
      properties:
        id:
          type: string
          example: "doc-1"
        title:
          type: string
          example: "Student Handbook 2024-2025"
        description:
          type: string
          example: "Complete student handbook with policies, procedures, and important information for the academic year"
        type:
          type: string
          example: "PDF"
        category:
          type: string
          example: "Academic"
        author:
          type: string
          example: "Sarah Wilson"
        authorId:
          type: integer
          example: 4
        createdDate:
          type: string
          format: date
          example: "2024-08-15"
        lastModified:
          type: string
          format: date
          example: "2024-09-10"
        size:
          type: string
          example: "2.4 MB"
        tags:
          type: array
          items:
            type: string
          example: ["handbook", "policies", "students"]
        status:
          type: string
          enum: [published, draft]
          example: "published"
      required:
        - title
        - description
        - type
        - category
        - author
        - authorId
        - createdDate
        - lastModified
        - size
        - status

    Subtask:
      type: object
      properties:
        id:
          type: string
          example: "subtask-1-1"
        title:
          type: string
          example: "Design database schema"
        description:
          type: string
          example: "Create ER diagram and database schema for student information"
        status:
          type: string
          enum: [todo, in_progress, done]
          example: "done"
        assignee:
          type: string
          example: "John Smith"
        assigneeId:
          type: integer
          example: 1
        estimatedHours:
          type: integer
          example: 8
        actualHours:
          type: integer
          example: 10
        startedDate:
          type: string
          format: date
          example: "2024-09-19"
        completedDate:
          type: string
          format: date
          example: "2024-09-18"
      required:
        - title
        - description
        - status
        - assignee
        - assigneeId
        - estimatedHours

    Task:
      type: object
      properties:
        id:
          type: string
          example: "task-1"
        title:
          type: string
          example: "Student Registration System"
        description:
          type: string
          example: "Develop a comprehensive student registration system for the new academic year"
        status:
          type: string
          enum: [todo, in_progress, done]
          example: "todo"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
        assignee:
          type: string
          example: "John Smith"
        assigneeId:
          type: integer
          example: 1
        reporter:
          type: string
          example: "Sarah Wilson"
        reporterId:
          type: integer
          example: 4
        createdDate:
          type: string
          format: date
          example: "2024-09-15"
        dueDate:
          type: string
          format: date
          example: "2024-10-15"
        completedDate:
          type: string
          format: date
          example: "2024-09-18"
        estimatedHours:
          type: integer
          example: 40
        actualHours:
          type: integer
          example: 30
        labels:
          type: array
          items:
            type: string
          example: ["backend", "database", "urgent"]
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/Subtask'
      required:
        - title
        - description
        - status
        - priority
        - assignee
        - assigneeId
        - reporter
        - reporterId
        - createdDate
        - dueDate
        - estimatedHours

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - user

    DocumentsResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            total:
              type: integer
              example: 50
            totalPages:
              type: integer
              example: 5
          required:
            - page
            - limit
            - total
            - totalPages
      required:
        - documents
        - pagination

    DashboardStats:
      type: object
      properties:
        totalUsers:
          type: integer
          example: 142
        totalDocuments:
          type: integer
          example: 56
        totalTasks:
          type: integer
          example: 89
        activeTasks:
          type: integer
          example: 23
        completedTasks:
          type: integer
          example: 66

    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error occurred"

    Message:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []